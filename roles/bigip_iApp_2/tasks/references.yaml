---

- name: Add node by their FQDN for application pool
  bigip_node:
      state: "present"
      partition: "{{partition}}"
      fqdn: "{{ node_fqdn }}"
      name: "{{ node_fqdn }}"
  delegate_to: localhost
  register: result


- name: Uploading SSL Certificates
  delegate_to: localhost
  bigip_ssl_certificate:
    state: "present"
    name: "{{ client_ssl_cert_name }}"
    cert_content: "{{ lookup('file', 'ssl/website.crt') }}"
    key_content: "{{ lookup('file', 'ssl/website.key') }}"

# - name: Creating SSL profiles
#   delegate_to: localhost
- name: Creating SSL Profiles
  delegate_to: localhost
  bigip_rest_wrapper:
    state=present
    host={{ ansible_ssh_host }}
    port={{ bigip_port }}
    user={{ bigip_user }}
    password={{ bigip_password }}
    payload='{
              "name":"{{service_name}}_clientssl",
              "defaultsFrom":"/Common/clientssl",
              "cert":"{{service_name}}.crt",
              "key":"{{service_name}}.key"
             }'
    collection_path="mgmt/tm/ltm/profile/client-ssl"
    resource_key="name"

- name: Deploying/updating high speed logging pool
  delegate_to: localhost
  bigip_pool:
      name: "{{syslog_pool_name}}"
      lb_method: "{{ lb_method }}"
      slow_ramp_time: "{{ slow_ramp_time }}"
      monitors: "{{ monitors }}"

- name: Add members to high speed logging pool
  delegate_to: localhost
  bigip_pool_member:
      pool: "{{ syslog_pool_name }}"
      host: "{{ item.host }}"
      port: "{{ item.port }}"
  with_items: "{{ syslog_pool_members }}"

- name: Building REST payload for the asm loggging profile to remote analytics server
  template: src="asm_logging_profile_payload.j2" dest="{{ install_path }}/cache/{{ env_tag }}/asm_logging_profile_payload-{{ service }}.json"
  delegate_to: localhost

- name: Deploying/updating ASM Logging Profile to send to Remote Analytics Server
  delegate_to: localhost
  bigip_rest_wrapper:
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path="mgmt/tm/security/log/profile"
      payload_file="{{ install_path }}/cache/{{ env_tag }}/asm_logging_profile_payload-{{ service }}.json"
      resource_key="name"

# AVR module required to make this call
- name: Deploying/updating Analytics Profile
  delegate_to: localhost
  bigip_rest_wrapper:
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path="mgmt/tm/ltm/profile/analytics"
      resource_key="name"
      payload='{"name":"{{ analytics_profile_name }}","capturedTrafficExternalLogging":"disabled","capturedTrafficInternalLogging":"disabled","collectGeo":"enabled","collectIp":"enabled","collectMaxTpsAndThroughput":"enabled","collectMethods":"enabled","collectPageLoadTime":"enabled","collectResponseCodes":"enabled","collectSubnets":"enabled","collectUrl":"enabled","collectUserAgent":"enabled","collectUserSessions":"enabled","collectedStatsExternalLogging":"disabled","collectedStatsInternalLogging":"enabled","defaultsFrom":"/Common/analytics","notificationByEmail":"disabled","notificationBySnmp":"disabled","notificationBySyslog":"disabled","partition":"Common","publishIruleStatistics":"disabled","sampling":"enabled","sessionCookieSecurity":"ssl-only","sessionTimeoutMinutes":"5"}'
  when: deploy_analytics == "true"

- name: Uploading Datagroup ... background for sorry page
  delegate_to: localhost
  bigip_rest_wrapper:
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path="mgmt/tm/ltm/data-group/internal"
      resource_key="name"
      payload='{"name":"background_images","type":"string","records":[{"name":"{{image_background}}"}]}'

- name: Uploading Datagroup ... image for sorry page
  delegate_to: localhost
  bigip_rest_wrapper:
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path="mgmt/tm/ltm/data-group/internal"
      resource_key="name"
      payload='{"name":"sorry_images","type":"string","records":[{"name":"{{image_sorry}}"}]}'


- name: Uploading iRules ... sorry_page_rule
  delegate_to: localhost
  bigip_irule:
      content: "{{ lookup('file', 'irule_sorry_page.tcl') }}"
      module: "ltm"
      name: "irule_sorry_page"
      state: "present"

- name: Uploading iRules ... sorry_page_rule
  delegate_to: localhost
  bigip_irule:
      content: "{{ lookup('file', 'irule_demo_analytics.tcl') }}"
      module: "ltm"
      name: "irule_demo_analytics"
      state: "present"


# We need to retry this tasks until it succeeds, ASM takes longer to boot
#  than some of the other LTM functionality we have been provisioning against
#  so far. 
- name: Create the ASM policy
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Create the ASM policy"
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      port={{ bigip_port }}
      collection_path='mgmt/tm/asm/policies'
      resource_key="name"
      payload='{"name":"{{ asm_policy_name }}","applicationLanguage":"utf-8","caseInsensitive":true}'
  register: result
  until: result|changed
  retries: 40
  delay: 5

- name: Save the policy self link
  set_fact: policySelfLink="{{ result['out']['selfLink'] }}"

- name: Save the policy ID
  set_fact: policyID="{{ result['out']['id'] }}"

- name: Import our policy over the one existing above 
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Import our policy over the one existing above "
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path='mgmt/tm/asm/tasks/import-policy'
      payload='{"file":"{{ asm_policy_base64 }}","isBase64":true,"policyReference":{"link":"{{ policySelfLink }}" } }'
  register: result

- name: Save the async task ID
  set_fact: taskId="{{ result['out']['id'] }}"

- name: Determine whether the asm policy import task is complete
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Determine whether the asm policy import task is complete"
      state=inspect
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path='mgmt/tm/asm/tasks/import-policy/{{ taskId }}'
  register: importResult
  until: importResult.out.status.find("COMPLETED") != -1
  retries: 40
  delay: 2

- name: Apply the ASM policy
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Apply the ASM policy"
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path='mgmt/tm/asm/tasks/apply-policy'
      payload='{"policyReference":{"link":"{{ policySelfLink }}"} }'
  register: result
- name: Save the async task ID
  set_fact: taskId="{{ result['out']['id'] }}"

- name: Determine whether the asm policy apply task is complete
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Determine whether the asm policy apply task is complete"
      state=inspect
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path='mgmt/tm/asm/tasks/apply-policy/{{ taskId }}'
  register: applyResult
  until: applyResult.out.status.find("COMPLETED") != -1
  retries: 40
  delay: 2

# Added Step to Publish to Drafts first for v12
- name: Create an LTM policy for use with by iApp which associates the ASM policy
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Create an LTM policy for use with by iApp which associates the ASM policy"
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path='mgmt/tm/ltm/policy'
      payload='{"name":"{{ ltm_policy_name }}","partition":"Common","subPath":"Drafts","controls":["asm"],"requires":["http"],"strategy":"/Common/first-match","rules":[{"name":"rule-1","ordinal":1,"actions":[{"name":"0","asm":true,"code":0,"enable":true,"policy":"/Common/{{ asm_policy_name }}","port":0,"request":true,"status":0,"vlanId":0}],"conditions":[]}]}'
      resource_key="name"

- name: Publish the LTM policy
  delegate_to: localhost
  bigip_rest_wrapper:
      name="Publish the LTM policy"
      state=present
      host={{ ansible_ssh_host }}
      port={{ bigip_port }}
      user={{ bigip_user }}
      password={{ bigip_password }}
      collection_path='mgmt/tm/ltm/policy'
      payload='{"name":"{{ ltm_policy_name }}","command":"publish"}'
      resource_key="name"



